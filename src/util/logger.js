//  Copyright 2021 joaophellip
 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
 
//      http://www.apache.org/licenses/LICENSE-2.0
 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

import * as bunyan from 'bunyan'

/**
 * This class wraps a third-party logger. It is used to export logs generated by the application at data/app/log.
 * 
 */
class LoggerWrapper {

  constructor () {
    const streams = [
      {
        level: 'trace',
        type: 'rotating-file',
        path: 'data/app.log',
        period: '1d',
        count: 10,
      },
    ]
    this.log = bunyan.createLogger({
      name: 'galMessagingService',
      streams: streams,
    })
  }

  fatal (msg, ...extras) {
    this.log.fatal(msg, ...extras)
  }

  error (msg, ...extras) {
    this.log.error(msg, ...extras)
  }

  warn (msg, ...extras) {
    this.log.warn(msg, ...extras)
  }

  info (msg, ...extras) {
    this.log.info(msg, ...extras)
  }

  debug (msg, ...extras) {
    this.log.debug(msg, ...extras)
  }

  trace (msg, ...extras) {
    this.log.trace(msg, ...extras)
  }
}

const myLogger = new LoggerWrapper()

export const Logger = {
  fatal: myLogger.fatal.bind(myLogger), 
  error: myLogger.error.bind(myLogger), 
  warn: myLogger.warn.bind(myLogger),
  info: myLogger.info.bind(myLogger),
  debug: myLogger.debug.bind(myLogger),
  trace: myLogger.trace.bind(myLogger),
}